package com.cc.controller;

import java.security.Principal;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cc.Exception.BankException;
import com.cc.entity.Bank;
import com.cc.service.BankService;
import com.cc.utilityHelper.GeneralResponse;

@RestController
@RequestMapping("/bank")
public class BankController {

	@Autowired
	BankService bankService;
	
	@PostMapping("/addBank")
	private ResponseEntity<GeneralResponse>  addBank(@RequestBody Bank bank) throws BankException{
		GeneralResponse generalResponse = new GeneralResponse();
		generalResponse.setMessage("Bank was added by user Id: "+bank.getUserId());
		generalResponse.setData(bankService.addBank( bank));
		return ResponseEntity.ok(generalResponse);
	}
	
	
	@PutMapping("/updateBank/{bankId}")
	private ResponseEntity<GeneralResponse> updateBank(@PathVariable Integer bankId,@RequestBody Bank bank) throws BankException, UsersException{
		GeneralResponse generalResponse = new GeneralResponse();
		generalResponse.setMessage("Bank was updated by user Id: "+bank.getUserId());
		generalResponse.setData(bankService.updateBank(bankId, bank));
		return ResponseEntity.ok(generalResponse);
	}
	
	@DeleteMapping("/deleteBank/{userId}/{bankId}")
	private ResponseEntity<GeneralResponse>  deleteBank (@PathVariable Integer userId,@PathVariable Integer bankId,Principal user) throws BankException,UsersException{
		GeneralResponse generalResponse = new GeneralResponse();
		generalResponse.setMessage("Bank was deleted by user Id: "+userId);
		generalResponse.setData(bankService.deleteBank(userId, bankId, user));
		return ResponseEntity.ok(generalResponse);
	}
	
	@GetMapping("/getBankById/{userId}/{bankId}")
	private ResponseEntity<GeneralResponse> getBankById(@PathVariable Integer userId,@PathVariable Integer bankId) throws BankException, UsersException{
		GeneralResponse generalResponse = new GeneralResponse();
		generalResponse.setMessage("Bank was Found by user Id: "+userId);
		generalResponse.setData(bankService.getBankById(userId, bankId, user));
		return ResponseEntity.ok(generalResponse);
	}
	
	@GetMapping("getBankByBankId/{userId}/{bankId}")
	private ResponseEntity<GeneralResponse> getBankByBankId(@PathVariable Integer userId,@PathVariable Double bankId,Principal user) throws BankException,UsersException{
		GeneralResponse generalResponse = new GeneralResponse();
		generalResponse.setMessage("Bank was Found by bank num Id: "+bankId);
		generalResponse.setData(bankService.getBankByBankId(userId, bankId, user));
		return ResponseEntity.ok(generalResponse);
	}
	
	@GetMapping("/getAllBanksByUserId/{userId}")
	private ResponseEntity<GeneralResponse> getAllBanksByUserId(Integer userId) throws BankException,UsersException{
		GeneralResponse generalResponse = new GeneralResponse();
		generalResponse.setMessage("Found All Banks by user Id: "+userId);
		generalResponse.setData(bankService.getAllBanksByUserId(userId, user));
		return ResponseEntity.ok(generalResponse);
	}
	
	@PostMapping("sendMoneyFromBankToWallet/{userId}/{bankId}/{walletId}")
	private ResponseEntity<GeneralResponse> sendMoneyFromBankToWallet(@PathVariable Integer userId,@PathVariable Integer bankId,@PathVariable Integer walletId,@RequestBody AddMoneyFromBankToWallet addMoneyFromBankToWallet,Principal user) throws BankException, UsersException, WalletException{
		GeneralResponse generalResponse = new GeneralResponse();
		generalResponse.setMessage("Send money from bank to wallet by user id: "+userId);
		generalResponse.setData(bankService.sendMoneyFromBankToWallet(userId, bankId, walletId, addMoneyFromBankToWallet, user));
		return ResponseEntity.ok(generalResponse);
	}
	
}
