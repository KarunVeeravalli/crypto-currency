package com.cc.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cc.dto.Btw;
import com.cc.entity.Wallet;
import com.cc.exception.BankException;
import com.cc.exception.UserException;
import com.cc.exception.WalletException;
import com.cc.repository.WalletRepository;
@Service
public class WalletServiceImpl implements WalletService{
	
	@Autowired
	WalletRepository repository;

	@Override
	public Wallet addMoneyToWallet(Integer userId, Btw addMoneyFromBankToWallet)
			throws UserException, WalletException, BankException {
		Wallet wallet = getWalletByUserId(userId);
		
		//here we have to create transaction
		wallet.setAvailableAmount(wallet.getAvailableAmount()+addMoneyFromBankToWallet.getAmount());
		return wallet;
	}

	@Override
	public Wallet takeMoneyFromWallet(Integer userId, Btw sendMoneyFromWalletToBank)
			throws UserException, WalletException, BankException {
		Wallet wallet = getWalletByUserId(userId);
		
		//here we have to create transaction
		if(sendMoneyFromWalletToBank.getAmount()<=wallet.getAvailableAmount()) {
			wallet.setAvailableAmount(wallet.getAvailableAmount()-sendMoneyFromWalletToBank.getAmount());
		}
		else {
			throw new WalletException("not suffient funds in your wallet");
		}
		return repository.save(wallet);
	}

	@Override
	public Wallet getWalletByUserId(Integer userId) throws UserException, WalletException {
		return repository.findByUserId(userId);
	}

	@Override
	public Wallet getWalletById( Integer walletId) throws UserException, WalletException {
		return repository.findById(walletId).orElseThrow(()->new WalletException("not found wallet by wallet id: "+walletId));
	}

	@Override
	public Wallet deleteWalletById(Integer walletId) throws UserException, WalletException {
		Wallet wallet = getWalletById(walletId);
		repository.deleteById(walletId);
		return wallet;
	}

	@Override
	public Wallet addWallet(Integer userId) throws UserException, WalletException {
		Wallet wallet = new Wallet();
		wallet.setUserId(userId);
		return repository.save(wallet);
	}

}
